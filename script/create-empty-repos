#!/usr/bin/env bash
#
# Create practice repos

#################################################################
# NOTE: You must have a personal access token (PAT)             #
# saved to your environment variables to use this script.       #
# We recommend a dedicated service account (e.g. githubteacher) #
#################################################################

# shellcheck disable=SC1091
source "$HOME/.trainingmanualrc"

# shellcheck source=script/shared_functions
source ./shared_functions

# shell variables
collab_repo=$1
practice_repo_name=$2
safe_org_url="https://$ROOT_URL/$CLASS_ORG"
org_url="https://$TOKEN_OWNER:$TEACHER_PAT@$ROOT_URL/$CLASS_ORG"
org_repos_endpoint="https://$INSTANCE_URL/repos/$CLASS_ORG"

generate_repos() {
  echo "generate_repos"
  # Create practice repos based on collaborators in the inital class repo
  # :? will display an error if $collaborators is empty or unset
  for username in "${collaborators[@]:?}"; do
    # if a practice repo has already been created for the user
    if repo_is_reachable "$org_url/$practice_repo_name-$username"; then
      # ask if the repository should be deleted and recreated
      if ask "A $practice_repo_name repo already exists for $username.\nIs it OK to delete and recreate?" N; then
        echo "Deleting $CLASS_ORG/$practice_repo_name-$username... "
        # delete the existing practice repo
        http --auth "$TOKEN_OWNER:$TEACHER_PAT" \
          DELETE "$org_repos_endpoint/$practice_repo_name-$username" >>log.out 2>&1
        # create a new practice repo
        create_practice_repo "$username"
      else
        echo "OK. Skipping $username... "
      fi
    else
      # create a new practice repository
      create_practice_repo "$username"
    fi
  done
}

create_practice_repo() {
echo "create_practice_repo"
  student=$1
  local repo_name="$practice_repo_name-$student"
  local repo_url="https://$ROOT_URL/$CLASS_ORG/$repo_name"
  if [[ "$ROOT_URL" == "github.com" ]]; then
    export local pages_url="https://$CLASS_ORG.github.io/$repo_name"
  else
    export local pages_url="https://$ROOT_URL/pages/$CLASS_ORG/$repo_name"
  fi

  case $practice_repo_name in

  hackathon)
    local repo_description="Let's hack the Battleship game."

    # Create a new repo named $repo_name in $CLASS_ORG
    create_repo \
      --name "$repo_name" \
      --description "$repo_description" \
      --private true \
      --has_wiki false
    echo "Repo Created"
    ;;
  *)
    print_error "Practice repo name \'$practice_repo_name\' not recognized."
    exit 1
    ;;
  esac

  # Invite student as a collaborator
  add_repo_collaborator \
    --repo "$repo_name" \
    --user "$student" \
    --permission "admin"

  print_done "Repo URL: $repo_url"
}

# get list of repo collaborators
get_collaborators "$collab_repo"

# generate a repo for each collaborator
generate_repos

print_success "All $practice_repo_name repos can be found here: $safe_org_url"
